// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        kotlin_version = "1.4.10"
        nav_version = "2.3.2"
        material_version = "1.2.1"
        core_version = "1.0.1"
        vertion_navigation = "2.3.5"
        version_room = "2.2.6"
        version_multidex = "2.0.1"
        design_version = "30.0.0"
        version_coroutine = "1.4.2"
        version_lifecycle_extensions = "2.2.0"
        lifecycle_version = "2.3.0"
        hilt_version = "2.31.2-alpha"
        hilt_viewModels = "2.2.0-alpha02"
        hilt_compiler = "1.0.0-beta01"
        hilt_androidx_viewmodel = "1.0.0-alpha03"
        paging_version_runtime = "1.0.1"
        paging_version_runtime_ktx = "3.0.0-beta03"
        picasso_version = "2.71828"
        glide_version = "4.11.0"
        glide_version_annotationProcessor = "4.11.0"

    }


//Button click
//binding.button.setOnClickListener {
//
//    //Check runtime permission
//    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
//
//        if (checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) ==
//            PackageManager.PERMISSION_DENIED
//        ) {
//            //permission denied
//            val permissions = arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE)
//
//            //Show popup to request runtime permission
//            requestPermissions(permissions, PERMISSION_CODE)
//
//        } else {
//            //Permission already granted
//
//            pickImageFromGallery()
//        }
//
//    } else {
//        //System os is < Marshmallow
//
//        pickImageFromGallery()
//
//    }
//}

//}
//
//private fun pickImageFromGallery() {
//
//    val intent  = Intent(Intent.ACTION_PICK)
//    intent.type = "image/*"
//
//    startActivityForResult(intent, IMAGE_PICK_CODE)
//}
//
//companion object {
//
//    // Image pick code
//    private val IMAGE_PICK_CODE = 1000
//
//    //Permission code
//    private val PERMISSION_CODE = 1001
//
//
//}
//
//@SuppressLint("MissingSuperCall")
//override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
////        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
//
//    when (requestCode) {
//
//        PERMISSION_CODE -> {
//
//            if (grantResults.size > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
//
//                //Permission popup from granted
//                pickImageFromGallery()
//
//            } else {
//
//                //permission from popup denied
//                Toast.makeText(this, "Permission denied", Toast.LENGTH_LONG).show()
//
//            }
//        }
//    }
//
//}
//
//@SuppressLint("MissingSuperCall")
//override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
////        super.onActivityResult(requestCode, resultCode, data)
//
//    if (resultCode == Activity.RESULT_OK && requestCode == IMAGE_PICK_CODE){
//
//        binding.image.setImageURI(data?.data)
//    }
//
//}
        repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.0.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.20"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:2.3.5"
        classpath "com.google.dagger:hilt-android-gradle-plugin:2.38.1"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}